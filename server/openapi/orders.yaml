tags:
  - name: Orders
    description: Customer orders, payments, timeline, and production updates
paths:
  /api/orders:
    post:
      tags: [Orders]
      summary: Create a new order (customer)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productCategory, productName, quantity, unitPrice, totalAmount]
              properties:
                productCategory: { type: string }
                productName: { type: string }
                quantity: { type: integer }
                unitPrice: { type: number }
                totalAmount: { type: number }
                customization:
                  type: object
                  additionalProperties: true
                colors:
                  type: array
                  items: { type: string }
                sizes:
                  type: object
                  additionalProperties: true
                printLocations:
                  type: array
                  items: { type: string }
                companyName: { type: string }
                shippingAddress:
                  type: object
                  additionalProperties: true
            example:
              productCategory: hoodie
              productName: Classic Hoodie
              quantity: 95
              unitPrice: 28.5
              totalAmount: 2707.5
              customization:
                printMethod: screen_print
                inkColors: 2
                placements: [front, back]
                pantone: 286C
              colors: [navy]
              sizes: { XS: 5, S: 20, M: 35, L: 25, XL: 10 }
              printLocations: [front, back]
              companyName: City Youth League
              shippingAddress:
                name: City Youth League
                street: 123 Main St
                city: Springfield
                state: IL
                zip: "62704"
                country: US
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 66de612b3f3cc9b4c7f5a9d2
                customerId: usr_12345
                customerEmail: buyer@example.com
                customerName: Ahmed Ali
                companyName: City Youth League
                orderNumber: ORD-1725663000000
                productCategory: hoodie
                productId: 66de5f6b3f3cc9b4c7f5a9a0
                productName: Classic Hoodie
                quantity: 95
                unitPrice: 28.5
                totalAmount: 2707.5
                customization:
                  printMethod: screen_print
                  inkColors: 2
                  placements: [front, back]
                  pantone: 286C
                colors: [navy]
                sizes: { XS: 5, S: 20, M: 35, L: 25, XL: 10 }
                printLocations: [front, back]
                status: submitted
                totalPaidAmount: 0
                shippingPaidAmount: 0
                shippingAddress:
                  name: City Youth League
                  street: 123 Main St
                  city: Springfield
                  state: IL
                  zip: "62704"
                  country: US
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    get:
      tags: [Orders]
      summary: List orders (customer sees own, admin sees all)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              example:
                - id: 66de612b3f3cc9b4c7f5a9d2
                  orderNumber: ORD-1725663000000
                  productCategory: hoodie
                  productName: Classic Hoodie
                  quantity: 95
                  totalAmount: 2707.5
                  status: paid
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
              example:
                id: 66de612b3f3cc9b4c7f5a9d2
                orderNumber: ORD-1725663000000
                productCategory: hoodie
                productName: Classic Hoodie
                quantity: 95
                unitPrice: 28.5
                totalAmount: 2707.5
                status: paid
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/orders/{id}/status:
    patch:
      tags: [Orders]
      summary: Update order status (admin)
      description: Also auto-charges pending shipping fee when status set to `shipping`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [submitted, paid, in_production, shipping, delivered]
                trackingNumber: { type: string }
                estimatedDelivery: { type: string, format: date-time }
            example:
              status: shipping
              trackingNumber: 1Z999AA10123456784
              estimatedDelivery: 2025-09-10T17:00:00.000Z
      responses:
        '200': { description: Updated order, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '400': { description: Invalid status, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Order not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/orders/{id}/payment:
    patch:
      tags: [Orders]
      summary: Mark full payment as completed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
              example:
                id: 66de612b3f3cc9b4c7f5a9d2
                status: paid
                totalPaidAmount: 2707.5
                paidAt: 2025-08-25T14:45:00.000Z
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Order not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    get:
      tags: [Orders]
      summary: List order payments (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Payments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Payment' }
              example:
                - id: pay_01J5YQZX0ABCDEF
                  orderId: 66de612b3f3cc9b4c7f5a9d2
                  phase: full_payment
                  amountCents: 270750
                  currency: usd
                  status: paid
                  paidAt: 2025-08-25T14:45:00.000Z
                - id: pay_01J5YQZX1ABCDEG
                  orderId: 66de612b3f3cc9b4c7f5a9d2
                  phase: shipping_fee
                  amountCents: 1500
                  currency: usd
                  status: pending
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/orders/{id}/timeline:
    post:
      tags: [Orders]
      summary: Add timeline event (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [eventType, description]
              properties:
                eventType: { type: string }
                description: { type: string }
                eventData:
                  type: object
                  additionalProperties: true
                triggerSource:
                  type: string
                  enum: [manual, system, webhook, api, admin]
            example:
              eventType: artwork_approved
              description: Customer approved the final artwork
              eventData:
                approvedBy: buyer@example.com
                approvedAt: 2025-08-25T14:43:00.000Z
              triggerSource: manual
      responses:
        '201':
          description: Timeline event created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderTimeline' }
              example:
                id: tl_01J5YS6X0ABCDE
                orderId: 66de612b3f3cc9b4c7f5a9d2
                eventType: artwork_approved
                description: Customer approved the final artwork
                eventData:
                  approvedBy: buyer@example.com
                triggerSource: manual
                createdAt: 2025-08-25T14:43:00.000Z
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    get:
      tags: [Orders]
      summary: Get order timeline events
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Timeline events
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OrderTimeline' }
              example:
                - id: tl_01J5YS3B0ABCDE
                  orderId: 66de612b3f3cc9b4c7f5a9d2
                  eventType: order_submitted
                  description: Order placed by customer
                  createdAt: 2025-08-25T14:40:00.000Z
                - id: tl_01J5YS6X0ABCDE
                  orderId: 66de612b3f3cc9b4c7f5a9d2
                  eventType: artwork_approved
                  description: Customer approved the final artwork
                  createdAt: 2025-08-25T14:43:00.000Z
  /api/orders/{id}/production:
    post:
      tags: [Orders]
      summary: Add production update (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [stage, status]
              properties:
                stage: { type: string }
                status: { type: string }
                description: { type: string }
                photos:
                  type: array
                  items: { type: string }
                documents:
                  type: array
                  items: { type: string }
            example:
              stage: printing
              status: in_progress
              description: First color pass on auto press
              photos:
                - https://cdn.example.com/orders/66de612b/prod/press.jpg
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/ProductionUpdate' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/orders/{id}/production-updates:
    get:
      tags: [Orders]
      summary: Get production updates for an order
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Production updates
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductionUpdate' }
              example:
                - id: pu_01J5YS9C0ABCDE
                  orderId: 66de612b3f3cc9b4c7f5a9d2
                  stage: printing
                  status: in_progress
                  description: First color pass on auto press
                  photos:
                    - https://cdn.example.com/orders/66de612b/prod/press.jpg
                  createdAt: 2025-08-25T15:00:00.000Z
